import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int n, p1, p2, m, cnt = 0;
	static int arr[][],res[];
	static boolean v[];
	
	static Queue<Integer> q = new LinkedList<>();

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		n = Integer.parseInt(in.readLine());
		arr = new int[n+1][n+1];			 
		res = new int[n+1];					 
		v = new boolean[n + 1];				 
		st = new StringTokenizer(in.readLine());
		p1 = Integer.parseInt(st.nextToken()); 
		p2 = Integer.parseInt(st.nextToken()); 

		m = Integer.parseInt(in.readLine());

		for (int i = 1; i <= m; i++) {
			st = new StringTokenizer(in.readLine());
			int a = Integer.parseInt(st.nextToken()); 
			int b = Integer.parseInt(st.nextToken()); 
			arr[a][b]=1;
			arr[b][a]=1;
		}
		
		bfs(p1,p2);
		
		if(res[p2]==0)System.out.println(-1);
		else System.out.println(res[p2]);
		System.out.println();

	}

	static void bfs(int a, int b) {
		q.offer(a);
		v[a] = true;
		while (!q.isEmpty()) {
			int num = q.poll();
			if(num==b) return;
			for(int i=1;i<=n;i++) {
				if(arr[num][i]==1&&!v[i]) {
					q.offer(i);
					v[i]=true;
					res[i]=res[num]+1;
				}
			}
		}
	}

}
